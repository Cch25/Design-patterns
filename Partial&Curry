using System;
using System.Net;

namespace TryOuts.PartialAndCurry
{
    public class PartialAndCurryExample
    {
        public void TestCurryAndPartial()
        {
            //var client = new WebClient();
            //Func<string, string> download = url => client.DownloadString(url);
            //Func<string, Func<string>> downloadCurry = download.Curry();

            //string data = download.Partial("http://microsoft.com").WithRetry();
            //string data2 = downloadCurry("http://microsoft.com").WithRetry();


            Func<string, string, bool> testPartial = (a, b) => DoStuffForTesting(a, b);
            bool partialTest = testPartial.Partial("aa", "aa").WithRetry();

            Func<string, Func<string, bool>> testCurry = testPartial.Curry();
            bool curryTest = testCurry("aa")("aa");

            Console.WriteLine(partialTest);
            Console.WriteLine(curryTest);

        }


        public bool DoStuffForTesting(string a, string b)
        {
            return a.Equals(b);
        }

    }

    public static class Extensions
    {
        public static T WithRetry<T>(this Func<T> action)
        {
            var result = default(T);
            int retryCount = 0;

            bool succesful = false;
            do
            {
                try
                {
                    result = action();
                    succesful = true;
                }
                catch (WebException ex)
                {
                    retryCount++;
                }
            } while (retryCount < 3 && !succesful);

            return result;
        }

        #region [ Partial  - Transform a method with parameters in a method to N-1 parameters or none ]
        public static Func<TResult> Partial<TParam1, TResult>(this Func<TParam1, TResult> func, TParam1 parameter)
        {
            return () => func(parameter);
        }
        public static Func<TResult> Partial<TParam1, TParam2, TResult>(this Func<TParam1, TParam2, TResult> func, TParam1 param1, TParam2 param2)
        {
            return () => func(param1, param2);
        }
       
        #endregion

        #region [ Curry ]
        public static Func<TParam1, Func<TResult>> Curry<TParam1, TResult>(this Func<TParam1, TResult> func)
        {
            return parameter => () => func(parameter);
        }
        public static Func<T1, Func<T2, TResult>> Curry<T1, T2, TResult>(this Func<T1, T2, TResult> func)
        {
            return p1 => p2 => func(p1, p2);
        }
        #endregion
    }
}
